#!/bin/bash
#
# Copyright (c) 2015, Los Alamos National Security, LLC
# All rights reserved.
#
# Copyright (2015). Los Alamos National Security, LLC. This software was
# produced under U.S. Government contract DE-AC52-06NA25396 for Los Alamos
# National Laboratory (LANL), which is operated by Los Alamos National
# Security, LLC for the U.S. Department of Energy. The U.S. Government has
# rights to use, reproduce, and distribute this software. NEITHER THE
# GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS
# OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE. If
# software is modified to produce derivative works, such modified software
# should be clearly marked, so as not to confuse it with the version available
# from LANL.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Reads multiple input files, decompressing as necessary, and writes the data
# to stdout using cat (ordered) or mux (multiplexed).
#
# Takes file paths on stdin or as args.
#
# Author: Curt Hash <chash@lanl.gov>

set -e

function usage {
	cat <<EOF
Usage: [FILE LIST] | $0 [OPTIONS] FORMAT [FILE]...

Format must be one of [db|json].

Options:
	-h|--help		output this text and exit
	-m|--mux		mux output (alters order)
EOF
	exit $1
}

OPTS="hm"
LONG="help,mux"
ARGS=$(getopt -o $OPTS -l $LONG -- "$@")
eval set -- "$ARGS"

while :
do
	case "$1" in
		-h|--help)
			usage 0
			;;
		-m|--mux)
			MUX=1
			shift
			;;
		--)
			shift
			break
			;;
		*)
			usage 1
			;;
	esac
done

FORMAT="$1"
shift

# Validate format.
case "$FORMAT" in
	db)
		;;
	json)
		;;
	*)
		echo "invalid FORMAT '$FORMAT'" >&2
		usage 1
		;;
esac

# Set defaults.
[ -z "$MUX" ] && MUX=0

if [ $MUX -eq 1 ]
then
	CMD="/usr/share/db/bin/mux $FORMAT"
else
	CMD="cat"
fi

FIRST=1
function append_arg {
	local arg

	if [ ! -e "$FPATH" ]
	then
		echo "No such file: $FPATH" >&2
		exit 1
	fi

	if [ -f "$FPATH" ]
	then
		# Regular file.
		local ftype=$(file -b "$FPATH" | awk -F, '{print $1}')
		local cmd
		case "$ftype" in
			"gzip compressed data")
				cmd="zcat \"$FPATH\""
				;;
			"bzip2 compressed data")
				cmd="bzcat \"$FPATH\""
				;;
			"7-zip archive data")
				cmd="7z x \"$FPATH\" -so"
				;;
		esac
	fi

	# If using cat, discard the header on all but the first file.
	if [ $MUX -eq 0 ] && [ $FIRST -ne 1 ]
	then
		if [ -z "$cmd" ]
		then
			# Text file or named pipe.
			cmd="tail -n +2 \"$FPATH\""
		else
			cmd="$cmd | tail -n +2"
		fi
	fi

	if [ -z "$cmd" ]
	then
		# Text file or named pipe.
		arg="\"$FPATH\""
	else
		arg="<($cmd)"
	fi

	FIRST=0

	CMD="$CMD $arg"
}

if [ $# -eq 0 ]
then
	# Read paths from stdin.
	while read FPATH
	do
		append_arg
	done
else
	for FPATH in "$@"
	do
		append_arg
	done
fi

eval "$CMD"
